{"componentChunkName":"component---src-pages-programming-cf-index-mdx","path":"/programming/cf/","result":{"pageContext":{"frontmatter":{"title":"IBM Cloud Functions and IBM Event Streams"},"relativePagePath":"/programming/cf/index.mdx","titleType":"page","MdxNode":{"id":"f336bdf8-a77b-55d9-a2ec-bee6d1265980","children":[],"parent":"0f021fc0-946c-5ccb-8f22-ead4051ae686","internal":{"content":"---\ntitle: IBM Cloud Functions and IBM Event Streams\n\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nSimple tutorial for reading IBM Event Streams (using Kafka) messages with IBM \nCloud Functions Python runtime.\n\n## Prerequisites\n\n- An [IBM Cloud](https://cloud.ibm.com) account.\n- [IBM Cloud CLI](https://cloud.ibm.com/docs/cli?topic=cli-getting-started).\n- [IBM Cloud Functions CLI](https://cloud.ibm.com/functions/learn/cli).\n- Cloud Foundry Organization (in this tutorial, I'll use `noe.samaille`).\n- Cloud Foundry Space (in this tutorial, I'll use is `test`).\n\n## Log in to IBM Cloud using CLI\n\n- Log in locally to your IBM Cloud account using the CLI:\n    ```\n    ibmcloud login\n    ```\n- Select your region (in this example I'll create resources in the `us-south` region):\n    ```\n    ibmcloud target -r us-south\n    ```\n- Select your resource group (in this example I'll use `default`):\n    ```\n    ibmcloud target -g default\n    ```\n- Select your Cloud Foundry org and space (in this example I'll use `noe.samaille` org and `test` space):\n    ```\n    ibmcloud target --cf\n    ```\n\n## Create you action\n\nCreate an [IBM Cloud Functions Action](https://cloud.ibm.com/functions/actions) called `process-message`, that uses the **Python** runtime:\n\n![fn-action](images/fn-action.png)\n\nClick **Create** and put this sample code inside:\n```python\ndef main(dict):\n    messages = dict.get('messages')\n\n    if messages is None or messages[0] is None:\n        return { 'error': \"Invalid arguments. Must include 'messages' JSON array\" }\n    try:\n        val = messages[0]['value']\n    except KeyError:\n        return { 'error': \"Invalid arguments. Must include 'messages' JSON array\" }\n\n    for i in range(0, len(messages)):\n        msg = messages[i]\n        print('Message received:', msg['value'])\n\n    return { 'messages': messages }\n```\n\n## Provision IBM Event Streams\n\n- Provision an [IBM Event Streams](https://cloud.ibm.com/catalog/services/event-streams) instance. In this tutorial I'll call IBM Event Streams service instance `my-event-streams`:\n\n![es-provision](images/es-provision.png)\n\n- Create a topic called `hello-world`:\n\n![es-topic](images/es-topic.png)\n\n- Create service credentials called `cloud-function`:\n\n![fn-action](images/es-creds.png)\n\n## Binding the `/whisk.system/messaging` package to your Event Streams instance\n\nMore information in the [documentation](https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-pkg_event_streams#event_streams_binding):\n\n- Create a `/whisk.system/messaging` package binding that is configured for your Event Streams account. In this example, the package name is `MyEventStreamBind`.\n    ```sh\n    ibmcloud fn package bind /whisk.system/messaging MyEventStreamBind\n    ```\n- Verify that the package binding exists.\n    ```sh\n    ibmcloud fn package list\n    ```\n- Get the name of the service instance that you want to bind to an action or package.\n    ```sh\n    ibmcloud resource service-instances\n    ```\n- Get the name of the credentials that are defined for the service instance you got in the previous step.\n    ```sh\n    ibmcloud resource service-keys --instance-name my-event-streams\n    ```\n- Bind the service to the package that you created in the first step. In the example, this package is called `MyEventStreamBind`.\n    ```sh\n    ibmcloud fn service bind messagehub MyEventStreamBind --instance my-event-streams --keyname cloud-functions\n    ```\n- Verify that the credentials are successfully bound.\n    ```sh\n    ibmcloud fn package get MyEventStreamBind parameters\n    ```\n- Create a trigger that is fired when new messages are posted to your Event Streams topic.\n    ```sh\n    ibmcloud fn trigger create MyMessageHubTrigger -f /noe.samaille_test/MyEventStreamBind/MyEventStreamBind/messageHubFeed -p topic hello-world\n    ```\n- Create a trigger that is fired when new messages are posted to your Event Streams topic.\n    ```sh\n    ibmcloud fn trigger create MyMessageHubTrigger -f /noe.samaille_test/MyEventStreamBind/MyEventStreamBind/messageHubFeed -p topic hello-world\n    ```\n\n## Connect your action to the trigger\n\nOn [IBM Cloud Functions Triggers](https://cloud.ibm.com/functions/triggers), click your newly created trigger `MyMessageHubTrigger`, then in **Connected Actions** click **Add** and select your existing `process-message` action.\n\n## Test it out\n\nNow let's try that our action is triggered by a new message on topic `hello-world`. Open 2 separate terminals for the next steps.\n\nOn **terminal 1**:\n```sh\nibmcloud fn activation poll\n```\n\nOn **terminal 2**:\n- Clone event streams sample python client:\n    ```sh\n    git clone https://github.com/ibm-messaging/event-streams-samples\n    cd event-streams-samples/kafka-python-console-sample\n    ```\n- In `event-streams-samples/kafka-python-console-sample/app.py`, replace:\n    ```python\n    self.topic_name = 'kafka-python-console-sample-topic'\n    ```\n    With:\n    ```python\n    self.topic_name = 'hello-world'\n    ```\n- Run producer (check [how to set up environment config](https://github.com/ibm-messaging/event-streams-samples/blob/master/kafka-python-console-sample/docs/Local.md)):\n    ```sh\n    export KAFKA_BROKERS=<KAFKA_BROKERS>\n    export KAFKA_ADMIN_URL=<KAFKA_ADMIN_URL>\n    export KAFKA_APIKEY=<KAFKA_APIKEY>\n    python3 app.py $KAFKA_BROKERS $KAFKA_ADMIN_URL $KAFKA_APIKEY ../../certs.pem -producer\n    ```\n\nYou should now see the activations logged on **terminal 1** window:\n\n```sh\n‚ùØ ibmcloud fn activation poll\nEnter Ctrl-c to exit.\nPolling for activation logs\n... output ommited ...\nActivation: 'process-message' (bd0424b7a8a74a538424b7a8a74a530d)\n[\n    \"2021-04-13T14:55:27.155459Z    stdout: Message received: This is a test message #0\",\n    \"2021-04-13T14:55:27.155506Z    stdout: Message received: This is a test message #1\",\n    \"2021-04-13T14:55:27.155511Z    stdout: Message received: This is a test message #2\"\n]\n... output ommited ...\nActivation: 'process-message' (e1e3c7533d70405ba3c7533d70b05b95)\n[\n    \"2021-04-13T14:55:31.063744Z    stdout: Message received: This is a test message #4\"\n]\n... output ommited ...\nActivation: 'process-message' (76e9ac7d375e49c7a9ac7d375e69c729)\n[\n    \"2021-04-13T14:55:33.050174Z    stdout: Message received: This is a test message #5\"\n]\n... output ommited ...\n```\n\n</PageDescription>\n\n## **Overview**\n\n","type":"Mdx","contentDigest":"aeb53cceaf9c48fd08ea03dca2144a5a","counter":864,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"IBM Cloud Functions and IBM Event Streams"},"exports":{},"rawBody":"---\ntitle: IBM Cloud Functions and IBM Event Streams\n\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nSimple tutorial for reading IBM Event Streams (using Kafka) messages with IBM \nCloud Functions Python runtime.\n\n## Prerequisites\n\n- An [IBM Cloud](https://cloud.ibm.com) account.\n- [IBM Cloud CLI](https://cloud.ibm.com/docs/cli?topic=cli-getting-started).\n- [IBM Cloud Functions CLI](https://cloud.ibm.com/functions/learn/cli).\n- Cloud Foundry Organization (in this tutorial, I'll use `noe.samaille`).\n- Cloud Foundry Space (in this tutorial, I'll use is `test`).\n\n## Log in to IBM Cloud using CLI\n\n- Log in locally to your IBM Cloud account using the CLI:\n    ```\n    ibmcloud login\n    ```\n- Select your region (in this example I'll create resources in the `us-south` region):\n    ```\n    ibmcloud target -r us-south\n    ```\n- Select your resource group (in this example I'll use `default`):\n    ```\n    ibmcloud target -g default\n    ```\n- Select your Cloud Foundry org and space (in this example I'll use `noe.samaille` org and `test` space):\n    ```\n    ibmcloud target --cf\n    ```\n\n## Create you action\n\nCreate an [IBM Cloud Functions Action](https://cloud.ibm.com/functions/actions) called `process-message`, that uses the **Python** runtime:\n\n![fn-action](images/fn-action.png)\n\nClick **Create** and put this sample code inside:\n```python\ndef main(dict):\n    messages = dict.get('messages')\n\n    if messages is None or messages[0] is None:\n        return { 'error': \"Invalid arguments. Must include 'messages' JSON array\" }\n    try:\n        val = messages[0]['value']\n    except KeyError:\n        return { 'error': \"Invalid arguments. Must include 'messages' JSON array\" }\n\n    for i in range(0, len(messages)):\n        msg = messages[i]\n        print('Message received:', msg['value'])\n\n    return { 'messages': messages }\n```\n\n## Provision IBM Event Streams\n\n- Provision an [IBM Event Streams](https://cloud.ibm.com/catalog/services/event-streams) instance. In this tutorial I'll call IBM Event Streams service instance `my-event-streams`:\n\n![es-provision](images/es-provision.png)\n\n- Create a topic called `hello-world`:\n\n![es-topic](images/es-topic.png)\n\n- Create service credentials called `cloud-function`:\n\n![fn-action](images/es-creds.png)\n\n## Binding the `/whisk.system/messaging` package to your Event Streams instance\n\nMore information in the [documentation](https://cloud.ibm.com/docs/openwhisk?topic=openwhisk-pkg_event_streams#event_streams_binding):\n\n- Create a `/whisk.system/messaging` package binding that is configured for your Event Streams account. In this example, the package name is `MyEventStreamBind`.\n    ```sh\n    ibmcloud fn package bind /whisk.system/messaging MyEventStreamBind\n    ```\n- Verify that the package binding exists.\n    ```sh\n    ibmcloud fn package list\n    ```\n- Get the name of the service instance that you want to bind to an action or package.\n    ```sh\n    ibmcloud resource service-instances\n    ```\n- Get the name of the credentials that are defined for the service instance you got in the previous step.\n    ```sh\n    ibmcloud resource service-keys --instance-name my-event-streams\n    ```\n- Bind the service to the package that you created in the first step. In the example, this package is called `MyEventStreamBind`.\n    ```sh\n    ibmcloud fn service bind messagehub MyEventStreamBind --instance my-event-streams --keyname cloud-functions\n    ```\n- Verify that the credentials are successfully bound.\n    ```sh\n    ibmcloud fn package get MyEventStreamBind parameters\n    ```\n- Create a trigger that is fired when new messages are posted to your Event Streams topic.\n    ```sh\n    ibmcloud fn trigger create MyMessageHubTrigger -f /noe.samaille_test/MyEventStreamBind/MyEventStreamBind/messageHubFeed -p topic hello-world\n    ```\n- Create a trigger that is fired when new messages are posted to your Event Streams topic.\n    ```sh\n    ibmcloud fn trigger create MyMessageHubTrigger -f /noe.samaille_test/MyEventStreamBind/MyEventStreamBind/messageHubFeed -p topic hello-world\n    ```\n\n## Connect your action to the trigger\n\nOn [IBM Cloud Functions Triggers](https://cloud.ibm.com/functions/triggers), click your newly created trigger `MyMessageHubTrigger`, then in **Connected Actions** click **Add** and select your existing `process-message` action.\n\n## Test it out\n\nNow let's try that our action is triggered by a new message on topic `hello-world`. Open 2 separate terminals for the next steps.\n\nOn **terminal 1**:\n```sh\nibmcloud fn activation poll\n```\n\nOn **terminal 2**:\n- Clone event streams sample python client:\n    ```sh\n    git clone https://github.com/ibm-messaging/event-streams-samples\n    cd event-streams-samples/kafka-python-console-sample\n    ```\n- In `event-streams-samples/kafka-python-console-sample/app.py`, replace:\n    ```python\n    self.topic_name = 'kafka-python-console-sample-topic'\n    ```\n    With:\n    ```python\n    self.topic_name = 'hello-world'\n    ```\n- Run producer (check [how to set up environment config](https://github.com/ibm-messaging/event-streams-samples/blob/master/kafka-python-console-sample/docs/Local.md)):\n    ```sh\n    export KAFKA_BROKERS=<KAFKA_BROKERS>\n    export KAFKA_ADMIN_URL=<KAFKA_ADMIN_URL>\n    export KAFKA_APIKEY=<KAFKA_APIKEY>\n    python3 app.py $KAFKA_BROKERS $KAFKA_ADMIN_URL $KAFKA_APIKEY ../../certs.pem -producer\n    ```\n\nYou should now see the activations logged on **terminal 1** window:\n\n```sh\n‚ùØ ibmcloud fn activation poll\nEnter Ctrl-c to exit.\nPolling for activation logs\n... output ommited ...\nActivation: 'process-message' (bd0424b7a8a74a538424b7a8a74a530d)\n[\n    \"2021-04-13T14:55:27.155459Z    stdout: Message received: This is a test message #0\",\n    \"2021-04-13T14:55:27.155506Z    stdout: Message received: This is a test message #1\",\n    \"2021-04-13T14:55:27.155511Z    stdout: Message received: This is a test message #2\"\n]\n... output ommited ...\nActivation: 'process-message' (e1e3c7533d70405ba3c7533d70b05b95)\n[\n    \"2021-04-13T14:55:31.063744Z    stdout: Message received: This is a test message #4\"\n]\n... output ommited ...\nActivation: 'process-message' (76e9ac7d375e49c7a9ac7d375e69c729)\n[\n    \"2021-04-13T14:55:33.050174Z    stdout: Message received: This is a test message #5\"\n]\n... output ommited ...\n```\n\n</PageDescription>\n\n## **Overview**\n\n","fileAbsolutePath":"/home/runner/work/ibm-enterprise-runbooks/ibm-enterprise-runbooks/src/pages/programming/cf/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","243517648","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550","817386451"]}